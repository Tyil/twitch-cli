#!/usr/bin/env ruby

require "colorize"
require "json"
require "net/http"
require "optparse"

$opts    = {}
$api_url = "https://api.twitch.tv/kraken/streams/"

def get_config_location()
  locations = []

  # add locations to the lookup, but check wether some environment variables are set
  if !ENV["XDG_CONFIG_HOME"].nil?
    locations << ENV["XDG_CONFIG_HOME"] + "/twitch/channels"
  end

  locations << ENV["HOME"] + ".config/twitch/channels"

  locations.each do |location|
    if File.exists?(location)
      if $opts[:verbose]
        printf("Reading %s\n", location)
      end

      return location
    end
  end

  print("Could not load channel file: No file found at any of these locations:".red + "\n")

  locations.each do |location|
    print("  " + location + "\n")
  end

  exit(1)
end

def load_channels(file)
  channels = []

  File.open(file, "r") do |f|
    f.each_line do |line|
      channels.push(line.strip)
    end
  end

  return channels
end

def parse_opts()
  OptionParser.new do |opts|
    opts.banner = "Usage: twitch [options]"

    opts.on("-g", "--game", "Show the streamed game") do |o|
      $opts[:game] = o
    end

    opts.on("-m", "--mpv", "Open the stream in mpv. Implies -s if no argument was given.") do |o|
      $opts[:mpv] = o
    end

    opts.on("-s", "--single", "Show a single, random channel") do |o|
      $opts[:single] = o
    end

    opts.on("-u", "--url", "Return the URL when combined with -s, or add the url when -s is omitted") do |o|
      $opts[:url] = o
    end

    opts.on("-v", "--verbose", "Add extra verbose output") do |o|
      $opts[:verbose] = o
    end
  end.parse!
end

def check_channel(channel)
  if $opts[:verbose]
    print "Checking channel #{channel}\n"
  end

  # send out cURL request
  response = Net::HTTP.get(URI.parse($api_url + channel))
  json     = JSON.parse(response)

  # check if we returned any json at all
  if json.nil?
    return {
      "valid" => false
    }
  end

  # check wether the returned json contains a running stream
  if json["stream"].nil?
    return {
      "valid" => false
    }
  end

  if $opts[:verbose]
    print "Got response: #{response}\n"
  end

  return {
    "valid" => true,
    "name"  => json["stream"]["channel"]["name"],
    "game"  => json["stream"]["game"],
    "url"   => json["stream"]["channel"]["url"]
  }
end

def parse_channels(channels)
  threads = []
  online = []
  sizes  = {
    "name" => 0,
    "game" => 0
  }

  # loop through all channels
  channels.each do |channel|
    # do this in seperate threads to speed up the process
    threads << Thread.new {
      info = check_channel(channel)

      # check if we got a workable resultset
      if !info["valid"]
        next
      end

      # check wether this channel is the largest name so we can make a nice list later on
      if sizes["name"] < info["name"].length()
        sizes["name"] = info["name"].length()
      end

      # check the length of the game name as well
      if sizes["game"] < info["game"].length()
        sizes["game"] = info["game"].length()
      end

      # push the channel onto the array
      online.push(info)
    }
  end

  # make sure all threads are done
  threads.each do |thread|
    thread.join()
  end

  # add a small increment to sizes to add spaces in the eventual list
  sizes["name"] += 2
  sizes["game"] += 2

  return [online, sizes]
end

def print_channel(channel, sizes)
  printf("%- " + sizes["name"].to_s() + "s", channel["name"])

  if $opts[:game]
    # add 14 because of the coloring
    printf("%- " + (sizes["game"] + 14).to_s() + "s", channel["game"].green())
  end

  if $opts[:url]
    print(channel["url"].blue())
  end

  print("\n")
end

def main()
  # parse opts
  parse_opts()

  if $opts[:mpv] && ARGV[0]
    channel = check_channel(ARGV[0])

    if !channel["valid"]
      print "This channel is either offline, or doesn't exist\n"

      exit(2)
    end

    exec(sprintf("%s %s", "mpv", channel["url"]))
  end

  # get a list of all channels
  channel_file = get_config_location()
  channels     = load_channels(channel_file)
  parsed       = parse_channels(channels)

  online = parsed[0]
  sizes  = parsed[1]

  # return a single random channel
  if $opts[:single]
    # generate a random number within the bounds of the online array
    i = Random.new().rand(online.size())

    # if mpv is set, simply run the stream in mpv
    if $opts[:mpv]
      exec(sprintf("%s %s", "mpv", online[i]["url"]))
    end

    # if url is requested in combination with single, print just the url and exit cleanly
    if $opts[:url]
      print online[i]["url"]

      exit(0)
    end

    print_channel(online[i], sizes)
    exit(0)
  end

  # return a list of online channels
  online.each do |channel|
    print_channel(channel, sizes)
  end
end

main()

